generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String      @id @default(cuid())
  image          String?
  name           String?
  email          String?     @unique
  emailVerified  DateTime?
  password       String?
  username       String?     @unique
  hashedPassword String?
  isPremium      Boolean?    @default(false)
  notifications  Notification[]
  upvotes        Upvote[]
  accounts       Account[]
  sessions       Session[]
  products       Product[]
  comments       Comment[]
  businesses     Business[]
  ratings        Rating[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  products    Product[]  // Many-to-many relation with Product
  businesses  Business[] // Many-to-many relation with Business
}

model Product {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  headline    String
  rank        Int
  description String
  Activities String?
  Unique     String?
  VisitorsExpect String?
  Amenities     String?
  Historical    String?
  InterestStories String?
  WhatBringing  String?
  ScenicSpots String?
  MemorableExperiences String?
  BestTimetoVisit   String?
  KidsFriendly  String?
  AnyMessageForVisitors String?
  logo        String
  releaseDate String?
  website     String
  twitter     String
  discord     String?
  notification Notification[] 
    views                  Int?          @default(0)
  comments    Comment[]
  upvotes     Upvote[]
  images      Image[]
  categories  Category[]   // Many-to-many relation with Category
  ratings     Rating[]     // Add this line to establish relation
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  AverageRating Float?
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  status      Status       @default(PENDING)

  @@index([userId])
  @@index([status])
}

model Business {
  id           String     @id @default(cuid())
  name         String
  slug         String     @unique
  headline     String
  rank         Int
  description  String
  logo         String
  website      String
  twitter      String
  BusinessEmail String?
  BusinessPhone String?
  BusinessHours String?
  YearsInBusiness String?
  OwnerName String?
  NumofEmployees String?
  ServicesOffered String?
  Arminities String?
  AboutTheBusiness String?
  discord      String?
  notifications Notification[] 
  comments     Comment[]
  upvotes      Upvote[]
  AverageRating Float?
  images       Image[]
  categories   Category[]  // Many-to-many relation with Category
  ratings      Rating[]    // Add this line to establish relation
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  status       Status      @default(PENDING)

  @@index([userId])
  @@index([status])
}

model Image {
  id         String   @id @default(cuid())
  productId  String?
  businessId String?
  ratingId   String?
  product    Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  business   Business? @relation(fields: [businessId], references: [id], onDelete: Cascade)
  rating     Rating?  @relation(fields: [ratingId], references: [id], onDelete: Cascade)
  url        String  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId])
  @@index([businessId])
  @@index([ratingId])
}

model Rating {
  id          String     @id @default(cuid())
  score       Int        @default(0)
  comment     String?
  selectedDate String?   // Manually selected date
  reviewType  ReviewType? // Enum for predefined options
  userId      String
  HeadLine    String?
  productId   String?
  businessId  String?
  product     Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
  business    Business?  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      Image[]    // Relation to Image model
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([businessId])
}



model Upvote {
  id         String   @id @default(cuid())
  productId  String?
  businessId String?
  product    Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  business   Business? @relation(fields: [businessId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Comment {
  id             String    @id @default(cuid())
  profilePicture String
  productId      String?
  businessId     String?
  product        Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
  business       Business?  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  body           String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Notification {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  body           String
  profilePicture String
  productId      String?
  businessId     String?
  commentId      String?
  product        Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  business       Business? @relation(fields: [businessId], references: [id], onDelete: Cascade)
  type           NotificationType
  status         NotificationStatus @default(UNREAD)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum Status {
  PENDING
  ACTIVE
  REJECTED
}

enum NotificationStatus {
  UNREAD
  READ
}

enum NotificationType {
  UPVOTE
  COMMENT
  ACTIVATED
  REJECTED
}

enum ReviewType { // Enum for predefined options
  BUSINESS
  COUPLES
  FAMILY
  FRIENDS
  SOLO
}
